<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Programming on -pvik-</title>
    <link>https://pvik.github.io/categories/programming/</link>
    <description>Recent content in Programming on -pvik-</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 09 Aug 2019 20:18:33 -0400</lastBuildDate>
    
	<atom:link href="https://pvik.github.io/categories/programming/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Clojure to Common Lisp - Part 3 - Sample CRUD App</title>
      <link>https://pvik.github.io/blog/clojure-to-common-lisp-part-3-sample-crud-app/</link>
      <pubDate>Fri, 09 Aug 2019 20:18:33 -0400</pubDate>
      
      <guid>https://pvik.github.io/blog/clojure-to-common-lisp-part-3-sample-crud-app/</guid>
      <description>This post deals with writing a simple CRUD application.
 The code for this demo project is available on github
 Introduction We will write a simple TODO list application which will store our TODO items in a postgres database. This application will have a simple terminal based interface.
Running The Application Clone the git repository into a location where asdf can find it.
$ cd ~/common-lisp $ git clone https://github.</description>
    </item>
    
    <item>
      <title>Clojure to Common Lisp - Part 2 - Projects</title>
      <link>https://pvik.github.io/blog/clojure-to-common-lisp-part-2-projects/</link>
      <pubDate>Mon, 05 Aug 2019 19:15:33 -0400</pubDate>
      
      <guid>https://pvik.github.io/blog/clojure-to-common-lisp-part-2-projects/</guid>
      <description>This post is meant to be a quick start guide to setup a CL project and writing code.
 If you do not have a CL Environment yet, please check out my previous post.
 In Clojure you could use lein or boot to quickly create the skeleton of a project and you could start coding away. In common lisp we use a library called cl-project to achieve the same</description>
    </item>
    
    <item>
      <title>Clojure to Common Lisp - Part 1 - Getting Started</title>
      <link>https://pvik.github.io/blog/clojure-to-common-lisp-part-1-getting-started/</link>
      <pubDate>Thu, 01 Aug 2019 18:51:33 -0400</pubDate>
      
      <guid>https://pvik.github.io/blog/clojure-to-common-lisp-part-1-getting-started/</guid>
      <description>Clojure is a great language and has a great community surrounding it. It is opinionated, and if you want to get down to business and write code that solves problems, it mostly just gets out of your way.
It also lets me write lisp at work instead of Java!
Clojure has also allowed me to become less intimidated with lisp in general, and when I started working on a personal hobby project I decided to pick up another lisp language.</description>
    </item>
    
    <item>
      <title>Using Argon for Password Hashes</title>
      <link>https://pvik.github.io/blog/using-argon-for-password-hashes/</link>
      <pubDate>Tue, 30 Jul 2019 18:28:33 -0400</pubDate>
      
      <guid>https://pvik.github.io/blog/using-argon-for-password-hashes/</guid>
      <description>Include the argon2-jvm dependency in your build.boot or project.clj file.
[de.mkammerer/argon2-jvm &amp;quot;2.5&amp;quot;]  In the module you need to use argon hashes, import the necessary classes in you namespace (ns) declaration:
(:import (de.mkammerer.argon2 Argon2Factory Argon2Factory$Argon2Types))  Now you can generate a hash or verify if a string matches a hash like below:
(defonce ^:private ^:const arg2-iterations 8) (defonce ^:private ^:const arg2-memory 65536) (defonce ^:private ^:const arg2-parallelism 1) (defn- argon2-hash &amp;quot;Hash string with Argon2id&amp;quot; [str-to-be-hashed] (.</description>
    </item>
    
    <item>
      <title>Using Buddy for Authentication with JWT</title>
      <link>https://pvik.github.io/blog/using-buddy-for-authentication-with-jwt/</link>
      <pubDate>Thu, 30 Aug 2018 18:28:33 -0400</pubDate>
      
      <guid>https://pvik.github.io/blog/using-buddy-for-authentication-with-jwt/</guid>
      <description>buddy is a set of clojure modules and libraries to incorporate various security feature in your ring application. It is also fairly non-opinionated allowing you to decide how to handle various scenarios. Check out their github page to know more about the library. Their documentation can be found here. They also have basic examples for using various authentication schemes here.
In this tutorial we will configure our webapp to use signed JSON Web Tokens (JWT) and also setup access rules to make sure certain routes can only be accessed with specific authorization levels.</description>
    </item>
    
  </channel>
</rss>